-- Create Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT,
    gender VARCHAR(10),
    city VARCHAR(50),
    state VARCHAR(50),
    country VARCHAR(50)
);

-- Insert data into Customers table
INSERT INTO Customers (customer_id, name, age, gender, city, state, country)
VALUES (1, 'John', 30, 'Male', 'New York', 'NY', 'USA');

INSERT INTO Customers (customer_id, name, age, gender, city, state, country)
VALUES (2, 'Alice', 25, 'Female', 'Los Angeles', 'CA', 'USA');

INSERT INTO Customers (customer_id, name, age, gender, city, state, country)
VALUES (3, 'Bob', 35, 'Male', 'Chicago', 'IL', 'USA');


-- Create Products table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2),
    description VARCHAR(255)
);

-- Insert data into Products table
INSERT INTO Products (product_id, name, category, price, description)
VALUES (101, 'iPhone 12', 'Electronics', 999.00, 'Latest iPhone model');

INSERT INTO Products (product_id, name, category, price, description)
VALUES (102, 'MacBook Pro', 'Electronics', 1499.00, 'High-performance laptop');

INSERT INTO Products (product_id, name, category, price, description)
VALUES (103, 'Nike Air Max', 'Footwear', 120.00, 'Popular running shoes');

DROP TABLE Orders;

-- Create Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    order_date DATE,
    quantity INT,
    total_price DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Insert data into Orders table
INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price)
VALUES (1, 1, 101, TO_DATE('2022-01-05', 'YYYY-MM-DD'), 1, 999.00);

INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price)
VALUES (2, 2, 103, TO_DATE('2022-01-10', 'YYYY-MM-DD'), 2, 240.00);

INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price)
VALUES (3, 1, 102, TO_DATE('2022-01-15', 'YYYY-MM-DD'), 1, 1499.00);


-- 1. Data Exploration
-- Explore the structure and content of the dataset tables
DESCRIBE customers;
DESCRIBE products;
DESCRIBE orders;

-- View the first few rows of each table
SELECT * FROM (SELECT * FROM customers) WHERE ROWNUM <= 5;
SELECT * FROM (SELECT * FROM products) WHERE ROWNUM <= 5;
SELECT * FROM (SELECT * FROM orders) WHERE ROWNUM <= 5;

-- Check for missing values, anomalies, or duplicates in the data
SELECT COUNT(*) AS missing_values_customers FROM customers WHERE customer_id IS NULL OR name IS NULL OR age IS NULL;
SELECT COUNT(*) AS missing_values_products FROM products WHERE product_id IS NULL OR name IS NULL OR category IS NULL OR price IS NULL;
SELECT COUNT(*) AS missing_values_orders FROM orders WHERE order_id IS NULL OR customer_id IS NULL OR product_id IS NULL OR order_date IS NULL OR quantity IS NULL OR total_price IS NULL;


-- Check for duplicates in the customers table
SELECT customer_id, COUNT(*) AS duplicate_count
FROM customers
GROUP BY customer_id
HAVING COUNT(*) > 1;


-- 2. Data Preparation
-- Clean the data by handling missing values, removing duplicates, and ensuring consistency in data types (already done)


-- 3. Analysis
-- Calculate total revenue
SELECT SUM(total_price) AS total_revenue FROM orders;


-- Analyze customer demographics
SELECT AVG(age) AS average_age, COUNT(*) AS total_customers
FROM customers;


-- Identify top-selling products
SELECT product_name, total_sold
FROM (
    SELECT p.name AS product_name, SUM(quantity) AS total_sold
    FROM products p
    JOIN orders o ON p.product_id = o.product_id
    GROUP BY p.name  -- Include the product name in the GROUP BY expression
    ORDER BY total_sold DESC
) WHERE ROWNUM <= 5;


-- 4. SQL Queries
-- Total revenue generated by each product
SELECT p.name AS product_name, SUM(total_price) AS revenue
FROM products p
JOIN orders o ON p.product_id = o.product_id
GROUP BY p.name; -- Include product name in the GROUP BY expression


-- Number of orders placed by each customer
SELECT c.name AS customer_name, COUNT(*) AS total_orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.name;


-- Average order value for each product category
SELECT p.category, AVG(total_price) AS avg_order_value
FROM products p
JOIN orders o ON p.product_id = o.product_id
GROUP BY p.category;


-- List of top 10 customers based on their total spending
SELECT customer_name, total_spending
FROM (
    SELECT c.name AS customer_name, SUM(o.total_price) AS total_spending
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY c.name
    ORDER BY total_spending DESC
)
WHERE ROWNUM <= 10;

-- Monthly sales trends over the past year
SELECT EXTRACT(MONTH FROM order_date) AS month, 
       SUM(total_price) AS monthly_revenue
FROM orders
WHERE order_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD') 
  AND order_date < TO_DATE('2024-01-01', 'YYYY-MM-DD')
GROUP BY EXTRACT(MONTH FROM order_date)
ORDER BY month;


